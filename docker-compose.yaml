version: '3'

services:
  auth_app:
    container_name: auth_app
    build:
      context: ./auth_service
    env_file:
      - ./auth_service/.env
    depends_on:
      - auth_postgres
      - redis

  auth_postgres:
    container_name: auth_postgres
    image: postgres:13-alpine
    restart: always
    volumes:
      - auth_psql_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    env_file:
      - ./.env

  redis:
    image: redis:6.2-alpine

  django:
    build:
      context: django_service/.
    volumes:
      - ./django_service/:/usr/app/
      - static_volume:/usr/app/config/static
    env_file:
      - ./.movies_env
    depends_on:
      - movies_postgres

  movies_postgres:
    container_name: movies_postgres
    image: postgres:13
    volumes:
      - movies_psql_data:/var/lib/psql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=movies
      - TZ='Europe/Moscow'

  movies_api:
    container_name: movies_api
    command: uvicorn main:app --host 0.0.0.0 --port 5000
    build: ./api_service
    image: movies_api
    depends_on:
      - movies_elastic
      - redis
    env_file:
      - ./.movies_env

  movies_elastic:
    container_name: movies_elastic
    image: elasticsearch:7.12.0
    environment:
      - discovery.type=single-node

  etl:
    build:
      context: etl_service/.
    restart: always
    env_file:
      - ./.movies_env
    depends_on:
      - movies_postgres
      - movies_elastic

  nginx:
    image: nginx:1.19.2
    restart: always
    volumes:
      - ./site.conf:/etc/nginx/conf.d/site.conf
      - ./nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/usr/app/config/static
    depends_on:
      - django
      - movies_elastic
      - movies_api
      - auth_app
    ports:
      - "80:80"


volumes:
  auth_psql_data:
  movies_psql_data:
  static_volume:
